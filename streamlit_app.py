import streamlit as st
import pandas as pd
import fitz # PyMuPDF
import json
import re
from openai import OpenAI
from io import BytesIO
# from fpdf import FPDF # Comentado, pois fpdf n√£o est√° dispon√≠vel no ambiente do Code Interpreter

st.set_page_config(page_title="Analisador SRO - Previs√£o de Reclama√ß√µes")
st.title("üîç Analisador SRO - Previs√£o de Reclama√ß√µes")

# Configurar chave da OpenAI
# Certifique-se de que st.secrets["OPENAI_API_KEY"] est√° configurado corretamente
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Prompt V2 como system_message
SRO_PROMPT_V2 = """
Voc√™ √© um especialista em an√°lise preditiva de qualidade para uma empresa de servi√ßos automotivos especializada em troca e reparo de vidros (VFLR) e funilaria/martelinho de ouro (RRSM). Seu papel √© avaliar a chance de uma ordem de servi√ßo gerar uma reclama√ß√£o, com base exclusivamente em coment√°rios deixados por atendentes ap√≥s liga√ß√µes com clientes.

Considere como sinais de risco os seguintes padr√µes frequentemente observados em reclama√ß√µes reais:

- Palavras como: ‚Äúinforma‚Äù, ‚Äúcontato‚Äù, ‚Äúretorno‚Äù, ‚Äútroca‚Äù, ‚Äúpe√ßa‚Äù, ‚Äúciente‚Äù, ‚Äúsegurado‚Äù, ‚Äúcorretor(a)‚Äù
- Repeti√ß√£o de contato ou falha de comunica√ß√£o
- Atraso no atendimento ou aus√™ncia de follow-up
- Problemas t√©cnicos ou execu√ß√£o inadequada do servi√ßo
- Express√µes emocionais negativas ou frustra√ß√£o

Dada uma nova anota√ß√£o de atendimento, responda com:
- Pedido: N/A
- Probabilidade de Reclama√ß√£o: Baixa / M√©dia / Alta / Cr√≠tica
- Porcentagem de Reclama√ß√£o: XX%
- Fatores Cr√≠ticos: Explique quais sinais do texto contribu√≠ram para o risco
- Conclus√£o: Resuma o risco e sugira a√ß√µes se for m√©dio ou superior
"""

# Fun√ß√£o para extrair texto de PDF
def extract_text_from_pdf(uploaded_file):
    text = ""
    with fitz.open(stream=uploaded_file.read(), filetype="pdf") as doc:
        for page in doc:
            text += page.get_text()
    # Retorna cada linha como um coment√°rio separado
    return pd.DataFrame({"Comentario": [line for line in text.split("\n") if line.strip()]})

# Fun√ß√£o para extrair texto de JSON
def extract_text_from_json(uploaded_file):
    data = json.load(uploaded_file)
    comments = []
    if isinstance(data, list):
        for entry in data:
            comments.append(str(entry))
    elif isinstance(data, dict):
        for key, value in data.items():
            comments.append(f"{key}: {value}") # Inclui chave para contexto
    else:
        comments.append(str(data))
    return pd.DataFrame({"Comentario": comments})

# Fun√ß√£o com chamada para OpenAI GPT
@st.cache_data(show_spinner=False)
def analisar_comentario_openai(comentario, historico_df):
    try:
        # Selecionar 5 coment√°rios reais da base hist√≥rica (se houver)
        # Aten√ß√£o: Esta √© uma simula√ß√£o para o ambiente de teste.
        # No seu ambiente real, 'historico_df' deve ser carregado de forma mais robusta.
        if not historico_df.empty:
            exemplos_reais = historico_df.sample(n=min(5, len(historico_df)), random_state=42)["Comentario"].tolist()
            contexto_exemplos = "Exemplos de coment√°rios reais que geraram reclama√ß√£o:\n- " + "\n- ".join(exemplos_reais)
        else:
            contexto_exemplos = "N√£o h√° exemplos hist√≥ricos dispon√≠veis para refer√™ncia."

        prompt_usuario = f"""
{contexto_exemplos}

Agora analise o novo coment√°rio:
"{comentario}"

D√™ o resultado no seguinte formato:
- Pedido: N/A
- Probabilidade de Reclama√ß√£o: Baixa / M√©dia / Alta / Cr√≠tica
- Porcentagem de Reclama√ß√£o: XX%
- Fatores Cr√≠ticos: Explique quais sinais do texto contribu√≠ram para o risco
- Conclus√£o: Resuma o risco e sugira a√ß√µes se for m√©dio ou superior
"""

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": SRO_PROMPT_V2},
                {"role": "user", "content": prompt_usuario}
            ],
            temperature=0.3,
            max_tokens=300
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"Erro na an√°lise: {str(e)}"

# A fun√ß√£o gerar_pdf foi comentada devido √† indisponibilidade de fpdf no ambiente.
# def gerar_pdf(df):
#     pdf = FPDF()
#     pdf.add_page()
#     pdf.set_font("Arial", size=12)

#     risco_icon = {
#         "Baixa": "üü¢",
#         "M√©dia": "üü°",
#         "Alta": "üü†",
#         "Cr√≠tica": "üî¥"
#     }

#     for idx, row in df.iterrows():
#         resultado = row["Resultado IA"]
#         risco = ""
#         for nivel in risco_icon:
#             if f"Probabilidade de Reclama√ß√£o: {nivel}" in resultado:
#                 risco = risco_icon[nivel] + " " + nivel
#                 break

#         pdf.set_font("Arial", 'B', 11)
#         pdf.cell(0, 10, f"Coment√°rio {idx + 1} - Risco: {risco}", ln=True)
#         pdf.set_font("Arial", '', 11)
#         for linha in resultado.split("\n"):
#             if not linha.startswith("- Pedido"):
#                 pdf.multi_cell(0, 8, linha.strip())
#         pdf.ln(4)
#         pdf.cell(190, 0, '', ln=True, border='T')
#         pdf.ln(6)

#     buffer = BytesIO()
#     buffer.write(pdf.output(dest='S').encode('latin1'))
#     buffer.seek(0)
#     return buffer

# --- L√≥gica Principal ---
# Carrega o hist√≥rico de coment√°rios do arquivo CSV fornecido pelo usu√°rio
try:
    # Tentativa de carregar o arquivo excel como csv (assumindo que "Informa√ß√µes SRO.xlsx - Planilha3.csv" √© o arquivo relevante)
    historico_df_path = "Informa√ß√µes SRO.xlsx - Planilha3.csv"
    historico_df_raw = pd.read_csv(historico_df_path) # Use pd.read_csv para CSV
    # Renomear a Coluna A para "Comentario" conforme discutido
    # Assumindo que a primeira coluna √© a "Coluna A"
    historico_df = historico_df_raw.iloc[:, 0].to_frame(name="Comentario")
    historico_df = historico_df.dropna().drop_duplicates().reset_index(drop=True)
except Exception as e:
    st.warning(f"N√£o foi poss√≠vel carregar a base hist√≥rica 'Informa√ß√µes SRO.xlsx - Planilha3.csv'. A an√°lise ser√° feita sem exemplos hist√≥ricos. Erro: {e}")
    historico_df = pd.DataFrame({"Comentario": []}) # DataFrame vazio se houver erro

uploaded_file = st.file_uploader("Envie um arquivo Excel, PDF ou JSON com os atendimentos", type=["xlsx", "pdf", "json"])

df = pd.DataFrame() # Inicializa df fora do if para evitar NameError

if uploaded_file:
    if uploaded_file.name.endswith(".xlsx"):
        try:
            df = pd.read_excel(uploaded_file)
            if df.shape[0] == 1 and df.shape[1] > 1:
                # Se for uma √∫nica linha com m√∫ltiplos campos, concatena
                comentario = ' '.join([str(v) for v in df.iloc[0].values if pd.notna(v)])
                df = pd.DataFrame({"Pedido": ["Pedido 1"], "Comentario": [comentario]})
            elif df.shape[1] == 1:
                # Se for uma √∫nica coluna, assume que √© o coment√°rio
                df.insert(0, "Pedido", [f"Linha {i+1}" for i in range(len(df))])
                df.columns = ["Pedido", "Comentario"]
            else:
                # Tenta identificar colunas de pedido e coment√°rio
                colunas_disponiveis = df.columns.tolist()
                st.write(f"Colunas dispon√≠veis: {colunas_disponiveis}")

                # Tentativa de identificar colunas "Pedido" e "Comentario" automaticamente
                coluna_pedido = None
                coluna_comentario = None

                for col in colunas_disponiveis:
                    if "pedido" in col.lower() or "os" in col.lower() or "id" in col.lower():
                        if coluna_pedido is None: # Prioriza a primeira encontrada
                            coluna_pedido = col
                    if "comentario" in col.lower() or "anotacao" in col.lower() or "actionresult" in col.lower():
                        if coluna_comentario is None: # Prioriza a primeira encontrada
                            coluna_comentario = col

                if coluna_pedido and coluna_comentario and coluna_pedido != coluna_comentario:
                    st.success(f"Colunas identificadas automaticamente: Pedido='{coluna_pedido}', Coment√°rio='{coluna_comentario}'")
                    df = df[[coluna_pedido, coluna_comentario]].rename(columns={coluna_pedido: "Pedido", coluna_comentario: "Comentario"})
                    df["Comentario"] = df.groupby("Pedido")["Comentario"].transform(lambda x: '\n'.join(x.astype(str)))
                    df = df.drop_duplicates(subset=["Pedido"]).reset_index(drop=True)
                else:
                    # Se n√£o identificar automaticamente, pede para o usu√°rio selecionar
                    st.warning("N√£o foi poss√≠vel identificar as colunas de 'Pedido' e 'Coment√°rio' automaticamente. Por favor, selecione-as manualmente.")
                    colunas_selecionadas = st.multiselect(
                        "Selecione as colunas (primeira deve ser o Pedido/ID, segunda os Coment√°rios):",
                        df.columns,
                        default=colunas_disponiveis[:2] if len(colunas_disponiveis) >= 2 else []
                    )
                    if len(colunas_selecionadas) >= 2:
                        df = df[colunas_selecionadas[:2]]
                        df.columns = ["Pedido", "Comentario"]
                        df["Comentario"] = df.groupby("Pedido")["Comentario"].transform(lambda x: '\n'.join(x.astype(str)))
                        df = df.drop_duplicates(subset=["Pedido"]).reset_index(drop=True)
                    else:
                        st.error("Selecione pelo menos duas colunas: uma para o n√∫mero do pedido/ID e outra para os coment√°rios.")
                        st.stop()
        except Exception as e:
            st.error(f"Erro ao ler o arquivo Excel: {e}")
            st.stop()

    elif uploaded_file.name.endswith(".pdf"):
        df = extract_text_from_pdf(uploaded_file)
        # Adiciona uma coluna de "Pedido" fict√≠cia para PDFs
        df.insert(0, "Pedido", [f"PDF-{i+1}" for i in range(len(df))])

    elif uploaded_file.name.endswith(".json"):
        df = extract_text_from_json(uploaded_file)
        # Adiciona uma coluna de "Pedido" fict√≠cia para JSONs
        df.insert(0, "Pedido", [f"JSON-{i+1}" for i in range(len(df))])

    if not df.empty:
        with st.spinner("Analisando os pedidos com IA..."):
            # Passa o DataFrame hist√≥rico para a fun√ß√£o de an√°lise
            df["Resultado IA"] = df["Comentario"].apply(lambda x: analisar_comentario_openai(str(x), historico_df))

        st.success("An√°lise conclu√≠da com sucesso!")
        st.dataframe(df)

        output = BytesIO()
        df.to_excel(output, index=False, engine='openpyxl')
        output.seek(0)
        st.download_button("üìÇ Baixar Relat√≥rio Excel", data=output, file_name="relatorio_sro.xlsx")

        # pdf_buffer = gerar_pdf(df) # Comentado, pois fpdf n√£o est√° dispon√≠vel no ambiente.
        # st.download_button("üìù Baixar Relat√≥rio PDF", data=pdf_buffer, file_name="relatorio_sro.pdf")
