def analyze_with_gpt(self, text: str,import streamlit as st
import pandas as pd
import numpy as np
import openai
import json
import PyPDF2
import io
import os
from typing import List, Dict, Tuple, Optional
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import re

# Nota: Arquivos mantidos para vers√µes futuras:
# - Dados_SRO.pkl: Base hist√≥rica para implementa√ß√£o futura com embeddings/RAG
# - dados_semSRO.pkl: Base complementar para an√°lises espec√≠ficas
# Vers√£o atual usa an√°lise baseada em prompt estruturado

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="SRO Risk Analyzer - Prompt Version",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

class SROPromptAnalyzer:
    """Classe para an√°lise de risco SRO usando prompt estruturado"""
    
    def __init__(self):
        self.client = None
        self.is_loaded = False
        
        # Palavras-chave para an√°lise
        self.neutral_words = [
            'fila', 'data', 'equipe', 'atualiza√ß√£o', 'agenda', 'recontato',
            'inserido', 'tabela', 'negociado', 'complemento', 'evento', 
            'telefone', 'inicial', 'hashtag', 'uf', 'id', 'solicitante',
            'complexidade', 'c√≥digo', 'sku', 'whats', 'observa√ß√£o', 
            'pergunta', 'lojista', 'item', 'qt', 'escala', 'cria√ß√£o',
            'exclus√£o', 'tabelado', 'respons√°vel', 'bloqueio', 'distribuidor',
            'anjos', 'isento', 'receptivo', 'tela', 'dedut√≠vel', 'inclu√≠do',
            'imports', 'est√©tica', 'agradou', 'geral', 'objeto', 'vida'
        ]
        
        self.technical_issues = [
            'defeito', 'conserto', 'danos', 'sinistro', 'vazamento',
            'barulho', 'quebra', 'arranhado', 'sujo', 'manchado',
            'escorrida', 'descolado', 'solto', 'acendendo', 'parou',
            'sumiu', 'faltando', 'faltou', 'errado', 'errada',
            'incompleto', 'danificado', 'estragado', 'pior', 'voltou'
        ]
        
        self.negative_moderate = [
            'terr√≠vel', 'p√©ssimo', 'horr√≠vel', 'decepcionado', 'frustrado',
            'reclamar', 'problema', 'erro', 'falha', 'demora', 'demorado',
            'insatisfeito', 'revoltado', 'indignado', 'absurdo', 'inaceit√°vel'
        ]
        
        self.legal_risk = [
            'processar', 'advogado', 'jur√≠dico', 'procon', 'den√∫ncia',
            '√≥rg√£o', 'fiscaliza√ß√£o', 'consumidor', 'direito', 'preju√≠zo'
        ]
        
        self.positive_words = [
            'excelente', '√≥timo', 'perfeito', 'maravilhoso', 'fant√°stico',
            'agradecer', 'obrigado', 'parab√©ns', 'satisfeito', 'contente',
            'recomendo', 'eficiente', 'r√°pido', 'atencioso', 'prestativo'
        ]
        
    def load_system(self, api_key: str) -> bool:
        """Carrega o sistema OpenAI"""
        try:
            self.client = openai.OpenAI(api_key=api_key)
            self.is_loaded = True
            return True
        except Exception as e:
            st.error(f"Erro ao carregar OpenAI: {str(e)}")
            return False
    
    def count_contacts(self, text: str) -> int:
        """Conta o n√∫mero de contatos baseado em padr√µes textuais"""
        # Padr√µes que indicam m√∫ltiplos contatos
        contact_patterns = [
            r'contato\s*\d+',
            r'liga√ß√£o\s*\d+',
            r'retorno\s*\d+',
            r'recontato',
            r'nova\s*tentativa',
            r'segundo\s*contato',
            r'terceiro\s*contato',
            r'quarto\s*contato'
        ]
        
        contacts = 1  # Pelo menos 1 contato
        text_lower = text.lower()
        
        for pattern in contact_patterns:
            matches = re.findall(pattern, text_lower)
            if matches:
                contacts += len(matches)
        
        # Verificar palavras neutras para reduzir risco
        neutral_count = sum(1 for word in self.neutral_words if word in text_lower)
        if neutral_count > 3:  # Se muitas palavras neutras, reduzir contatos
            contacts = max(1, contacts - 1)
            
        return min(contacts, 5)  # M√°ximo 5 contatos
    
    def analyze_waiting_time(self, text: str) -> int:
        """Analisa tempo de espera baseado em padr√µes"""
        text_lower = text.lower()
        score = 0
        
        # Padr√µes de atraso
        delay_patterns = [
            'atras', 'demor', 'espera', 'aguard', 'pend',
            'mais de', 'j√° faz', 'h√° dias', 'semanas'
        ]
        
        urgent_patterns = [
            'urgente', 'emerg√™ncia', 'pressa', 'r√°pido',
            'imediato', 'hoje', 'agora'
        ]
        
        for pattern in delay_patterns:
            if pattern in text_lower:
                score += 3
                
        for pattern in urgent_patterns:
            if pattern in text_lower:
                score += 2
                
        return min(score, 10)
    
    def analyze_operational_failures(self, text: str) -> int:
        """Analisa falhas operacionais"""
        text_lower = text.lower()
        score = 0
        
        # Ind√≠cios t√©cnicos (alto risco)
        technical_count = sum(1 for word in self.technical_issues if word in text_lower)
        score += technical_count * 3
        
        # Falhas de processo (m√©dio risco)
        process_patterns = [
            'cadastro incorreto', 'n√£o atendidas', 'falha.*comunica√ß√£o',
            'problema.*t√©cnico', 'p√≥s.*servi√ßo'
        ]
        
        for pattern in process_patterns:
            if re.search(pattern, text_lower):
                score += 2
                
        return min(score, 10)
    
    def analyze_emotional_state(self, text: str) -> int:
        """Analisa estado emocional"""
        text_lower = text.lower()
        score = 0
        
        # Termos negativos moderados (1 ponto cada)
        negative_count = sum(1 for word in self.negative_moderate if word in text_lower)
        score += negative_count * 1
        
        # Termos de risco jur√≠dico (3 pontos cada)
        legal_count = sum(1 for word in self.legal_risk if word in text_lower)
        score += legal_count * 3
        
        # Termos positivos reduzem risco (-1 ponto cada)
        positive_count = sum(1 for word in self.positive_words if word in text_lower)
        score -= positive_count * 1
        
        return max(0, min(score, 10))
    
    def calculate_risk_score(self, text: str, order_id: str = "N/A") -> Dict:
        """Calcula o score de risco baseado na metodologia do prompt"""
        
        # Analisar cada fator
        contacts = self.count_contacts(text)
        waiting_time = self.analyze_waiting_time(text)
        operational_failures = self.analyze_operational_failures(text)
        emotional_state = self.analyze_emotional_state(text)
        
        # Converter para scores 0-10
        contact_score = min(10, contacts * 2)  # 1=2, 2=4, 3+=6+
        waiting_score = waiting_time
        failure_score = operational_failures
        emotion_score = emotional_state
        
        # Aplicar pesos
        weighted_contacts = contact_score * 4      # Peso 4
        weighted_waiting = waiting_score * 3       # Peso 3
        weighted_failures = failure_score * 2      # Peso 2
        weighted_emotion = emotion_score * 1       # Peso 1
        
        # Calcular total (m√°ximo 100)
        total_score = weighted_contacts + weighted_waiting + weighted_failures + weighted_emotion
        percentage = min(100, total_score)
        
        # Classificar risco
        if percentage >= 86:
            risk_level = "Cr√≠tico"
            risk_color = "#FF0000"
        elif percentage >= 61:
            risk_level = "Alto"
            risk_color = "#FF4B4B"
        elif percentage >= 31:
            risk_level = "M√©dio"
            risk_color = "#FF8C00"
        else:
            risk_level = "Baixo"
            risk_color = "#00C851"
        
        # Identificar fatores cr√≠ticos
        critical_factors = []
        if contacts >= 3:
            critical_factors.append(f"{contacts} contatos")
        if any(word in text.lower() for word in self.legal_risk):
            critical_factors.append("amea√ßa jur√≠dica")
        if any(word in text.lower() for word in self.technical_issues):
            critical_factors.append("problemas t√©cnicos")
        if waiting_score > 5:
            critical_factors.append("atraso no atendimento")
        
        return {
            "order_id": order_id,
            "risk_level": risk_level,
            "percentage": percentage,
            "risk_color": risk_color,
            "factors": {
                "contacts": contacts,
                "contact_score": contact_score,
                "waiting_score": waiting_score,
                "failure_score": failure_score,
                "emotion_score": emotion_score
            },
            "weighted_scores": {
                "contacts": weighted_contacts,
                "waiting": weighted_waiting,
                "failures": weighted_failures,
                "emotion": weighted_emotion
            },
            "critical_factors": critical_factors,
            "total_score": total_score
        }
    
    def analyze_with_gpt(self, text: str, order_id: str = "N/A") -> Dict:
        """An√°lise usando GPT-4o com o prompt estruturado"""
        if not self.is_loaded:
            return {"error": "Sistema n√£o carregado"}
        
        # Prompt estruturado baseado no PDF
        prompt = f"""
Voc√™ √© um analista preditivo em uma empresa de servi√ßos automotivos, especialista em prever o risco de um cliente formalizar uma reclama√ß√£o (SRO - Sistema de Registro de Ocorr√™ncias).

Analise o seguinte registro de atendimento e estime a probabilidade (0% a 100%) de reclama√ß√£o formal:

TEXTO PARA AN√ÅLISE:
{text}

METODOLOGIA DE AN√ÅLISE:
1. Frequ√™ncia de Contatos (Peso 4): Conte ind√≠cios de m√∫ltiplos contatos
2. Tempo de Espera (Peso 3): Identifique atrasos ou urg√™ncia
3. Falhas Operacionais (Peso 2): Detecte problemas t√©cnicos ou de processo
4. Estado Emocional (Peso 1): Avalie tom emocional e amea√ßas

PALAVRAS-CHAVE IMPORTANTES:
- Risco Jur√≠dico (alto risco): processar, advogado, jur√≠dico, procon, den√∫ncia
- Problemas T√©cnicos: defeito, conserto, danos, vazamento, quebra, erro
- Sentimento Negativo: terr√≠vel, p√©ssimo, frustrado, revoltado, absurdo
- Sentimento Positivo (reduz risco): excelente, √≥timo, agradecer, satisfeito

IMPORTANTE: Responda APENAS com um n√∫mero de 0 a 100 representando a porcentagem de risco, seguido de uma linha com a classifica√ß√£o (Baixo/M√©dio/Alto/Cr√≠tico), e depois uma explica√ß√£o breve.

Exemplo de resposta:
75
Alto
Cliente demonstra m√∫ltiplos contatos e frustra√ß√£o evidente.
"""
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um especialista em an√°lise preditiva de reclama√ß√µes de clientes. Seja preciso e objetivo."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=200,
                temperature=0.1
            )
            
            gpt_response = response.choices[0].message.content.strip()
            
            # Extrair porcentagem e classifica√ß√£o do GPT
            lines = gpt_response.split('\n')
            try:
                gpt_percentage = float(lines[0])
                gpt_classification = lines[1] if len(lines) > 1 else "Indefinido"
                gpt_explanation = lines[2] if len(lines) > 2 else "An√°lise n√£o dispon√≠vel"
            except (ValueError, IndexError):
                # Fallback para an√°lise local se GPT falhar
                local_analysis = self.calculate_risk_score(text, order_id)
                return local_analysis
            
            # Usar resultado do GPT como principal
            if gpt_percentage >= 86:
                risk_level = "Cr√≠tico"
                risk_color = "#FF0000"
            elif gpt_percentage >= 61:
                risk_level = "Alto"
                risk_color = "#FF4B4B"
            elif gpt_percentage >= 31:
                risk_level = "M√©dio"
                risk_color = "#FF8C00"
            else:
                risk_level = "Baixo"
                risk_color = "#00C851"
            
            # Fazer an√°lise local para breakdown detalhado
            local_analysis = self.calculate_risk_score(text, order_id)
            
            # Identificar fatores cr√≠ticos baseado na an√°lise local
            critical_factors = []
            if local_analysis["factors"]["contacts"] >= 3:
                critical_factors.append(f"{local_analysis['factors']['contacts']} contatos")
            if any(word in text.lower() for word in self.legal_risk):
                critical_factors.append("amea√ßa jur√≠dica")
            if any(word in text.lower() for word in self.technical_issues):
                critical_factors.append("problemas t√©cnicos")
            if local_analysis["factors"]["waiting_score"] > 5:
                critical_factors.append("atraso no atendimento")
            
            return {
                "order_id": order_id,
                "risk_level": risk_level,
                "percentage": gpt_percentage,
                "risk_color": risk_color,
                "factors": local_analysis["factors"],  # Manter breakdown local
                "weighted_scores": local_analysis["weighted_scores"],
                "critical_factors": critical_factors,
                "total_score": gpt_percentage,
                "gpt_analysis": gpt_response,
                "gpt_percentage": gpt_percentage,
                "gpt_classification": gpt_classification,
                "gpt_explanation": gpt_explanation,
                "method": "gpt_primary"
            }
            
        except Exception as e:
            st.warning(f"Erro na an√°lise GPT-4o: {str(e)}")
            # Fallback para an√°lise local
            local_analysis = self.calculate_risk_score(text, order_id)
            return {
                **local_analysis,
                "gpt_analysis": f"An√°lise GPT-4o n√£o dispon√≠vel: {str(e)}",
                "method": "local_fallback"
            }

def extract_text_from_file(uploaded_file) -> str:
    """Extrai texto de arquivos uploaded"""
    try:
        file_type = uploaded_file.type
        
        if file_type == "application/pdf":
            pdf_reader = PyPDF2.PdfReader(uploaded_file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text() + "\n"
            return text
            
        elif file_type in ["application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", 
                          "application/vnd.ms-excel"]:
            df = pd.read_excel(uploaded_file, header=None)
            text_parts = []
            
            for index, row in df.iterrows():
                for cell_value in row:
                    if pd.notna(cell_value) and str(cell_value).strip():
                        cell_text = str(cell_value).strip()
                        if cell_text.startswith('"') and cell_text.endswith('"'):
                            cell_text = cell_text[1:-1]
                        text_parts.append(cell_text)
            
            combined_text = " | ".join(text_parts)
            if len(combined_text) > 3000:
                combined_text = combined_text[:3000] + "..."
            
            return combined_text
            
        elif file_type == "application/json":
            json_data = json.load(uploaded_file)
            text = json.dumps(json_data, ensure_ascii=False, indent=2)
            return text
            
        elif file_type == "text/plain":
            return str(uploaded_file.read(), "utf-8")
            
        else:
            return "Tipo de arquivo n√£o suportado"
            
    except Exception as e:
        return f"Erro ao extrair texto: {str(e)}"

def create_risk_gauge(risk_score: float, risk_level: str, risk_color: str):
    """Cria gauge de risco"""
    fig = go.Figure(go.Indicator(
        mode = "gauge+number",
        value = risk_score,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': "Risco de Reclama√ß√£o SRO"},
        gauge = {
            'axis': {'range': [None, 100]},
            'bar': {'color': risk_color},
            'steps': [
                {'range': [0, 30], 'color': "#E8F5E8"},
                {'range': [30, 60], 'color': "#FFF8DC"},
                {'range': [60, 85], 'color': "#FFE4B5"},
                {'range': [85, 100], 'color': "#FFE4E1"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 85
            }
        }
    ))
    
    fig.update_layout(height=300)
    return fig

def create_factors_chart(analysis_result: Dict):
    """Cria gr√°fico dos fatores de risco"""
    factors = analysis_result["factors"]
    
    factor_names = ["Contatos", "Tempo Espera", "Falhas Op.", "Estado Emoc."]
    scores = [
        factors["contact_score"],
        factors["waiting_score"], 
        factors["failure_score"],
        factors["emotion_score"]
    ]
    weights = [4, 3, 2, 1]
    weighted_scores = [s * w for s, w in zip(scores, weights)]
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        name='Score Base',
        x=factor_names,
        y=scores,
        marker_color='lightblue',
        yaxis='y1'
    ))
    
    fig.add_trace(go.Bar(
        name='Score Ponderado',
        x=factor_names,
        y=weighted_scores,
        marker_color='darkblue',
        yaxis='y2'
    ))
    
    fig.update_layout(
        title="An√°lise por Fatores",
        xaxis=dict(title="Fatores"),
        yaxis=dict(title="Score Base (0-10)", side="left", range=[0, 10]),
        yaxis2=dict(title="Score Ponderado", side="right", overlaying="y", range=[0, 40]),
        barmode='group',
        height=400
    )
    
    return fig

def analyze_text(analyzer: SROPromptAnalyzer, text: str, source_name: str, order_id: str = "N/A"):
    """Fun√ß√£o para analisar texto e mostrar resultados"""
    
    with st.spinner("ü§ñ Analisando risco de reclama√ß√£o SRO..."):
        result = analyzer.analyze_with_gpt(text, order_id)
    
    if "error" in result:
        st.error(f"‚ùå {result['error']}")
        return
    
    # Layout em colunas
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üìä Resultado da An√°lise")
        
        # Gauge de risco
        gauge_fig = create_risk_gauge(
            result["percentage"], 
            result["risk_level"], 
            result["risk_color"]
        )
        st.plotly_chart(gauge_fig, use_container_width=True)
        
        # M√©tricas principais
        st.metric("üìà Score de Risco", f"{result['percentage']:.1f}%")
        st.metric("üè∑Ô∏è Classifica√ß√£o", result["risk_level"])
        st.metric("üìû N√∫mero de Contatos", result["factors"]["contacts"])
        
    with col2:
        st.subheader("üìà An√°lise Detalhada por Fatores")
        
        # Gr√°fico de fatores
        factors_chart = create_factors_chart(result)
        st.plotly_chart(factors_chart, use_container_width=True)
    
    # An√°lise GPT
    if "gpt_analysis" in result:
        st.subheader("ü§ñ An√°lise Detalhada (GPT-4o)")
        
        # Mostrar resultado estruturado se dispon√≠vel
        if result.get("method") == "gpt_primary":
            col_gpt1, col_gpt2 = st.columns(2)
            with col_gpt1:
                st.metric("üéØ GPT-4o Score", f"{result.get('gpt_percentage', 0):.1f}%")
            with col_gpt2:
                st.metric("üè∑Ô∏è GPT-4o Classifica√ß√£o", result.get('gpt_classification', 'N/A'))
            
            if result.get('gpt_explanation'):
                st.info(f"**Explica√ß√£o**: {result['gpt_explanation']}")
        
        # An√°lise completa
        st.text_area(
            "An√°lise completa:",
            result["gpt_analysis"],
            height=150,
            disabled=True
        )
    
    # Fatores cr√≠ticos identificados
    if result["critical_factors"]:
        st.subheader("‚ö†Ô∏è Fatores Cr√≠ticos Identificados")
        for factor in result["critical_factors"]:
            st.warning(f"‚Ä¢ {factor}")
    
    # Breakdown detalhado
    with st.expander("üîç Breakdown Detalhado da An√°lise"):
        st.write("**Scores por Fator:**")
        factors = result["factors"]
        weighted = result["weighted_scores"]
        
        col_a, col_b, col_c = st.columns(3)
        
        with col_a:
            st.write("**Fator**")
            st.write("Contatos")
            st.write("Tempo Espera")
            st.write("Falhas Op.")
            st.write("Estado Emoc.")
            
        with col_b:
            st.write("**Score Base**")
            st.write(f"{factors['contact_score']}/10")
            st.write(f"{factors['waiting_score']}/10")
            st.write(f"{factors['failure_score']}/10")
            st.write(f"{factors['emotion_score']}/10")
            
        with col_c:
            st.write("**Score Ponderado**")
            st.write(f"{weighted['contacts']}/40")
            st.write(f"{weighted['waiting']}/30")
            st.write(f"{weighted['failures']}/20")
            st.write(f"{weighted['emotion']}/10")
        
        # Breakdown detalhado
        st.write(f"**Total GPT-4o: {result['percentage']:.1f}% = {result['risk_level']}**")
        
        # Compara√ß√£o com an√°lise local se dispon√≠vel
        if result.get("method") == "gpt_primary":
            local_score = sum(result["weighted_scores"].values())
            st.write(f"*Compara√ß√£o - An√°lise Local: {local_score:.1f}%*")
    
    # Recomenda√ß√µes baseadas no n√≠vel de risco
    st.subheader("üí° Recomenda√ß√µes de A√ß√£o")
    
    if result["percentage"] >= 86:
        st.error("üö® **RISCO CR√çTICO**: A√ß√£o imediata necess√°ria!")
        st.write("‚Ä¢ Contato imediato com supervisor")
        st.write("‚Ä¢ Prioriza√ß√£o m√°xima do caso")
        st.write("‚Ä¢ Antecipa√ß√£o de agendamento")
    elif result["percentage"] >= 61:
        st.warning("‚ö†Ô∏è **RISCO ALTO**: Monitoramento pr√≥ximo!")
        st.write("‚Ä¢ Contato proativo com o cliente")
        st.write("‚Ä¢ Envolvimento do gestor t√©cnico")
        st.write("‚Ä¢ Feedback t√©cnico imediato")
    elif result["percentage"] >= 31:
        st.info("‚ÑπÔ∏è **RISCO M√âDIO**: Aten√ß√£o preventiva!")
        st.write("‚Ä¢ Acompanhamento regular")
        st.write("‚Ä¢ Corre√ß√£o de falhas identificadas")
        st.write("‚Ä¢ Comunica√ß√£o proativa")
    else:
        st.success("‚úÖ **RISCO BAIXO**: Situa√ß√£o controlada!")
        st.write("‚Ä¢ Acompanhamento padr√£o")
        st.write("‚Ä¢ Manuten√ß√£o da qualidade")
    
    # Download do relat√≥rio
    st.subheader("üì• Download do Relat√≥rio")
    
    report_data = {
        "timestamp": datetime.now().isoformat(),
        "pedido": result["order_id"],
        "texto_analisado": text[:500] + "..." if len(text) > 500 else text,
        "resultado": {
            "nivel_risco": result["risk_level"],
            "porcentagem": result["percentage"],
            "fatores_criticos": result["critical_factors"]
        },
        "analise_detalhada": result.get("gpt_analysis", ""),
        "breakdown": {
            "fatores": result["factors"],
            "scores_ponderados": result["weighted_scores"],
            "total": result["total_score"]
        }
    }
    
    report_json = json.dumps(report_data, ensure_ascii=False, indent=2)
    
    st.download_button(
        label="üìÑ Baixar Relat√≥rio JSON",
        data=report_json,
        file_name=f"relatorio_sro_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        mime="application/json"
    )

# Interface Streamlit
def main():
    # Header
    st.title("üîç SRO Risk Analyzer - Vers√£o Prompt")
    st.markdown("**Sistema de An√°lise Preditiva de Reclama√ß√µes**")
    st.markdown("*Baseado na metodologia de an√°lise estruturada com 4 fatores ponderados*")
    st.markdown("---")
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        # Verificar API Key nos secrets
        try:
            api_key = st.secrets["OPENAI_API_KEY"]
            st.success("üîë API Key carregada dos secrets")
        except KeyError:
            st.error("üîë API Key n√£o encontrada nos secrets")
            st.info("""
            **Configure nos Secrets do Streamlit:**
            1. V√° em Settings > Secrets
            2. Adicione: OPENAI_API_KEY = "sua_chave_aqui"
            """)
            api_key = None
        
        # Informa√ß√µes da metodologia
        st.header("üìã Metodologia de An√°lise")
        st.info("""
        **Fatores Ponderados:**
        
        üî¢ **Frequ√™ncia Contatos** (Peso 4)
        - 1 contato: baixo risco
        - 2 contatos: m√©dio risco  
        - 3+ contatos: alto risco
        
        ‚è∞ **Tempo de Espera** (Peso 3)
        - Atrasos e urg√™ncia
        
        ‚öôÔ∏è **Falhas Operacionais** (Peso 2)
        - Problemas t√©cnicos
        - Falhas de processo
        
        üò† **Estado Emocional** (Peso 1)
        - Sentimento negativo
        - Amea√ßas jur√≠dicas
        - Palavras positivas (reduzem risco)
        """)
        
        st.header("üéØ Classifica√ß√£o de Risco")
        st.write("‚Ä¢ **Baixo**: 0-30%")
        st.write("‚Ä¢ **M√©dio**: 31-60%") 
        st.write("‚Ä¢ **Alto**: 61-85%")
        st.write("‚Ä¢ **Cr√≠tico**: 86-100%")
    
    # Verificar pr√©-requisitos
    if not api_key:
        st.error("üîë API Key n√£o configurada nos secrets do Streamlit")
        st.stop()
    
    # Inicializar analyzer
    @st.cache_resource
    def load_analyzer(_api_key):
        analyzer = SROPromptAnalyzer()
        if analyzer.load_system(_api_key):
            return analyzer
        return None
    
    with st.spinner("ü§ñ Carregando sistema de an√°lise..."):
        analyzer = load_analyzer(api_key)
    
    if analyzer is None:
        st.error("‚ùå Falha ao carregar o sistema SRO")
        st.stop()
    
    st.success("‚úÖ Sistema SRO carregado com sucesso!")
    
    # Interface principal
    tab1, tab2, tab3 = st.tabs(["üì§ Upload de Arquivo", "‚úçÔ∏è Texto Manual", "üß™ Exemplos de Teste"])
    
    with tab1:
        st.header("üì§ An√°lise de Arquivo")
        st.markdown("Fa√ßa upload de um arquivo para analisar o risco de reclama√ß√£o")
        
        uploaded_file = st.file_uploader(
            "Escolha um arquivo",
            type=['pdf', 'xlsx', 'xls', 'json', 'txt'],
            help="Formatos suportados: PDF, Excel, JSON, TXT"
        )
        
        order_id = st.text_input("ID do Pedido (opcional)", placeholder="ORD123456")
        
        if uploaded_file:
            with st.spinner("üîÑ Extraindo texto do arquivo..."):
                extracted_text = extract_text_from_file(uploaded_file)
            
            # Mostrar preview do texto
            with st.expander("üëÅÔ∏è Preview do Texto Extra√≠do"):
                st.text_area(
                    "Texto extra√≠do:",
                    extracted_text[:1000] + "..." if len(extracted_text) > 1000 else extracted_text,
                    height=200
                )
            
            if st.button("üîç Analisar Risco", key="analyze_file"):
                analyze_text(analyzer, extracted_text, uploaded_file.name, order_id or "Arquivo")
    
    with tab2:
        st.header("‚úçÔ∏è An√°lise de Texto Manual")
        st.markdown("Digite ou cole um texto para analisar")
        
        order_id = st.text_input("ID do Pedido", placeholder="ORD123456", key="manual_order")
        
        manual_text = st.text_area(
            "Digite o texto para an√°lise:",
            height=200,
            placeholder="Cole aqui o registro de atendimento que deseja analisar..."
        )
        
        if manual_text and st.button("üîç Analisar Risco", key="analyze_manual"):
            analyze_text(analyzer, manual_text, "Texto Manual", order_id or "Manual")
    
    with tab3:
        st.header("üß™ Exemplos de Teste")
        st.markdown("Teste o sistema com exemplos pr√©-definidos")
        
        examples = {
            "Baixo Risco": "Cliente agradeceu pelo excelente atendimento. Servi√ßo executado conforme combinado. Cliente satisfeito com o resultado.",
            
            "M√©dio Risco": "Cliente ligou duas vezes perguntando sobre o andamento. Mencionou que est√° com pressa para viajar. Aguardando retorno h√° 2 dias.",
            
            "Alto Risco": "Terceiro contato do cliente. Reclamou que o defeito voltou ap√≥s o conserto. Disse que est√° muito frustrado e decepcionado com o servi√ßo.",
            
            "Cr√≠tico": "Cliente extremamente revoltado. Quarto contato! Disse que vai acionar o Procon e processar a empresa. Defeito persiste e est√° causando preju√≠zo. Inaceit√°vel!"
        }
        
        selected_example = st.selectbox("Escolha um exemplo:", list(examples.keys()))
        
        if st.button("üîç Testar Exemplo", key="test_example"):
            st.write(f"**Testando: {selected_example}**")
            st.write(f"*Texto:* {examples[selected_example]}")
            st.markdown("---")
            analyze_text(analyzer, examples[selected_example], "Exemplo", f"TESTE_{selected_example.replace(' ', '_').upper()}")
        
        # Exemplo customizado
        st.subheader("üìù Criar Exemplo Customizado")
        
        custom_order = st.text_input("ID do Pedido Teste", placeholder="TESTE_001", key="custom_order")
        custom_text = st.text_area(
            "Texto de exemplo:",
            height=150,
            placeholder="Digite aqui um exemplo personalizado para testar...",
            key="custom_example"
        )
        
        if custom_text and st.button("üîç Testar Customizado", key="test_custom"):
            analyze_text(analyzer, custom_text, "Exemplo Customizado", custom_order or "TESTE_CUSTOM")

if __name__ == "__main__":
    main()
